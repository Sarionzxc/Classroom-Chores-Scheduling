
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Frame, StringVar, Tk, Canvas, Entry, Text, Button, PhotoImage, messagebox
import controller as db_controller

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"./assets")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)



def updateCleaners():
    UpdateCleaners()

class UpdateCleaners(Frame):
     def __init__(self, parent, controller=None, *args, **kwargs):
        Frame.__init__(self, parent, *args, **kwargs)
        self.parent = parent
        self.selected_r_id = self.parent.selected_rid

        self.data = {
            "cleaners_id": StringVar(),
            "group_leader": StringVar(),
            "members": StringVar(),
            "schedule_day": StringVar(),
            "cleaning": StringVar()
        }



        self.canvas = Canvas(
            self,
            bg = "#FFFFFF",
            height = 420,
            width = 706,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.canvas.create_text(
            165.0,
            20.0,
            anchor="nw",
            text="UpdateCleaners",
            fill="#000000",
            font=("InriaSerif Bold", 50 * -1)
        )

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        image_1 = self.canvas.create_image(
            175.0,
            151.0,
            image=self.image_image_1
        )

        self.image_image_2 = PhotoImage(
            file=relative_to_assets("image_2.png"))
        image_2 = self.canvas.create_image(
            175.0,
            263.0,
            image=self.image_image_2
        )

        self.image_image_3 = PhotoImage(
            file=relative_to_assets("image_3.png"))
        image_3 = self.canvas.create_image(
            506.0,
            151.0,
            image=self.image_image_3
        )

        self.image_image_4 = PhotoImage(
            file=relative_to_assets("image_4.png"))
        image_4 = self.canvas.create_image(
            506.0,
            258.0,
            image=self.image_image_4
        )

        self.entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        entry_bg_1 = self.canvas.create_image(
            174.0,
            161.5,
            image=self.entry_image_1
        )
        self.id_text =self.canvas.create_text(
            111.0,
            470.0,
            anchor="nw",
            text="01",
            fill="#FFFFFF",
            font=("Montserrat SemiBold", 17 * -1)
        )
        entry_1 = Entry(
            self,
            textvariable=self.data['group_leader'],
            bd=0,
            bg="#9AB3DA",
            fg="#000716",
            highlightthickness=0
        )
        entry_1.place(
            x=52.0,
            y=142.0,
            width=244.0,
            height=37.0
        )

        self.entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        entry_bg_2 = self.canvas.create_image(
            506.0,
            161.5,
            image=self.entry_image_2
        )
        entry_2 = Entry(
            self,
            textvariable=self.data['schedule_day'],
            bd=0,
            bg="#9AB3DA",
            fg="#000716",
            highlightthickness=0
        )
        entry_2.place(
            x=380.0,
            y=142.0,
            width=252.0,
            height=37.0
        )

        self.entry_image_3 = PhotoImage(
            file=relative_to_assets("entry_3.png"))
        entry_bg_3 = self.canvas.create_image(
            506.0,
            251.0,
            image=self.entry_image_3
        )
        entry_3 = Entry(
            self,
            textvariable=self.data['cleaning'],
            bd=0,
            bg="#9AB3DA",
            fg="#000716",
            highlightthickness=0
        )
        entry_3.place(
            x=380.0,
            y=236.0,
            width=252.0,
            height=28.0
        )

        self.entry_image_4 = PhotoImage(
            file=relative_to_assets("entry_4.png"))
        entry_bg_4 = self.canvas.create_image(
            173.0,
            266.0,
            image=self.entry_image_4
        )
        entry_4 = Entry(
            self,
            textvariable=self.data['members'],
            bd=0,
            bg="#9AB3DA",
            fg="#000716",
            highlightthickness=0
        )
        entry_4.place(
            x=50.0,
            y=236.0,
            width=246.0,
            height=58.0
        )

        self.canvas.create_text(
            52.0,
            120.0,
            anchor="nw",
            text="Group Leader:",
            fill="#000000",
            font=("InriaSerif Bold", 15 * -1)
        )

        self.canvas.create_text(
            379.0,
            120.0,
            anchor="nw",
            text="Schedule:",
            fill="#000000",
            font=("InriaSerif Bold", 15 * -1)
        )

        self.canvas.create_text(
            380.0,
            207.0,
            anchor="nw",
            text="What to bring:",
            fill="#000000",
            font=("InriaSerif Bold", 15 * -1)
        )

        self.canvas.create_text(
            52.0,
            213.0,
            anchor="nw",
            text="Members:",
            fill="#000000",
            font=("InriaSerif Bold", 15 * -1)
        )

        self.button_image_1 = PhotoImage(
            file=relative_to_assets("button_1.png"))
        button_1 = Button(
            self,
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command=self.clear_entries,
            relief="flat"
        )
        button_1.place(
            x=572.0,
            y=348.0,
            width=87.0,
            height=39.0
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("button_2.png"))
        button_2 = Button(
            self,
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=self.handle_update,
            relief="flat"
        )
        button_2.place(
            x=468.0,
            y=349.0,
            width=87.0,
            height=39.0
        )

     def initialize(self):
        self.product_data = db_controller.get_cleaners() 
        self.selected_r_id = self.parent.selected_rid
        #self.product_data = self.parent.product_data

         # Filter out all reservations for selected id reservation
        if self.product_data is not None:
            self.selected_product_data = list(
                filter(lambda x: str(x[0]) == self.selected_r_id, self.product_data)
            )

            if self.selected_product_data:
                self.selected_product_data = self.selected_product_data[0]

                self.canvas.itemconfigure(self.id_text, text=self.selected_product_data[0])
                self.data["group_leader"].set(self.selected_product_data[1])
                self.data["members"].set(self.selected_product_data[2])
                self.data["schedule_day"].set(self.selected_product_data[3])
                self.data["cleaning"].set(self.selected_product_data[4])
                
                
     def handle_update(self):
        result = db_controller.update_cleaners( 
            self.selected_r_id,
            group_leader=self.data["group_leader"].get(),
            members=self.data["members"].get(),
            schedule_day=self.data["schedule_day"].get(),
            cleaning=self.data["cleaning"].get(),  
            
                  
        )

            # Check if the update was successful
        if result:
            messagebox.showinfo("Success", "Details updated successfully")
            # Navigate back to the view window
            self.parent.navigate("view")
            # Refresh the view window to update the Treeview
            self.parent.windows.get("view").handle_refresh()
            # Clear all fields in the update frame
            for label in self.data.keys():
                self.data[label].set("")
        else:
            messagebox.showerror("Error", "Failed to update details")

     def clear_entries(self):
        # Iterate over all entry fields and set their values to an empty string
        for var in self.data.values():
            var.set("")
